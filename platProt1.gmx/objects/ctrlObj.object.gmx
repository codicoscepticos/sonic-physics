<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCtrlObj</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables &amp; Constants

// Variables
onGround = false
speedOnGround = 0
lastYonGround = y
speedX = 0
speedY = 0
beenOnAir = false
speedOfJump = 6.5
angle = 0

// Constants
accOnGround = 0.046875
accOnAir = 0.09375
dec = 0.5
_friction = 0.046875
slopeFactorRun = 0.125
maxSpeedHor = 6
maxSpeedVer = 16
accOnAir = 0.09375
_gravity = 0.21875

// Movement Keys
keyLeftMovement = ord("A")
keyRightMovement = ord("D")
keyJump = ord("J")

// Sensors
sensorBottomExt = 16
sensorYExt = (sprite_yoffset-1) + sensorBottomExt

// Tiles
tileLayer = 1000000
tileWidth = 16; tileWidthHalfed = tileWidth / 2
tileHeight = 16; tileHeightDoubled = tileHeight * 2
tilesPointsDataColsNum = 5
tilesPointsData = ds_grid_create(tilesPointsDataColsNum, 1)
pointHeight = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Out of bounds (left, right, bottom) means restart
if (x + sprite_width &lt; 0 or y &gt; room_width or x - sprite_width &gt; room_width) game_restart()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ground speed calculation on ground landing
moveDownwards = (speedY &gt; 0)
angleDegrees = radtodeg(angle)

if (onGround and beenOnAir)
{
    beenOnAir = false
    
    if (moveDownwards)
    {
        if ((angleDegrees &gt;= 0 and angleDegrees &lt;= 23) or (angleDegrees &gt;= 339 and angleDegrees &lt;= 360))
        {
            speedOnGround = speedX
        }
        else if ((angleDegrees &gt;= 24 and angleDegrees &lt;= 45) or (angleDegrees &gt;= 316 and angleDegrees &lt;= 338))
        {
            if (abs(speedX) &gt; speedY)
            {
                speedOnGround = speedX
            }
            else
            {
                speedOnGround = speedY * 0.5 * -sign(cos(angle))
            }
        }
        else if ((angleDegrees &gt;= 69 and angleDegrees &lt;= 90) or (angleDegrees &gt;= 294 and angleDegrees &lt;= 315))
        {
            if (abs(speedX) &gt; speedY)
            {
                speedOnGround = speedX
            }
            else
            {
                speedOnGround = speedY * 0.5 * sign(cos(angle))
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Horizontal Movement
if keyboard_check(keyLeftMovement)
{
    if (onGround)
    {
        if (speedOnGround &gt; 0 and not moveDownwards)
        {
            speedOnGround -= dec
        }
        else if (speedOnGround &gt; -maxSpeedHor)
        {
            speedOnGround -= accOnGround
        }
    }
    else
    {
        if (speedX &gt; -maxSpeedHor)
        {
            speedX -= accOnAir
        }
    }
}
else if keyboard_check(keyRightMovement)
{
    if (onGround)
    {
        if (speedOnGround &lt; 0 and not moveDownwards)
        {
            speedOnGround += dec
        }
        else if (speedOnGround &lt; maxSpeedHor)
        {
            speedOnGround += accOnGround
        }
    }
    else
    {
        if (speedX &lt; maxSpeedHor)
        {
            speedX += accOnAir
        }
    }
}
else
{
    if (onGround)
    {
        if ( abs(speedOnGround) &lt; _friction )
        {
            speedOnGround = 0
        }
        else
        {
            speedOnGround -= _friction * sign(speedOnGround)
        }
    }
}
// End "Movement"
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vertical Movement (Key Jump Released)

if (keyboard_check_released(keyJump))
{
    if (speedY &lt; -4) speedY = -4
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vertical Movement (Key Jump Pressed)
if (onGround)
{
    if false or keyboard_check_pressed(keyJump)
    {
        speedX -= speedOfJump * sin(angle)
        speedY -= speedOfJump * cos(angle)
        onGround = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slope Factor
if (onGround)
{
    speedOnGround -= slopeFactorRun * sin(angle)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate speeds, while on ground
if (onGround)
{
    // Calculate speeds
    speedX = speedOnGround * cos(angle)
    speedY = speedOnGround * -sin(angle)
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize values, while on air
if (not onGround)
{
    angle = 0
    beenOnAir = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Air Drag
// (always before gravity calculations)
if ((not onGround) and (speedY &lt; 0 and speedY &gt; -4) and (abs(speedX) &gt;= 0.125)) speedX *= 0.96875
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gravity
if (not onGround) speedY += _gravity
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Top Horizontal Speed
if (speedY &gt; maxSpeedVer) speedY = maxSpeedVer
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate axes
x += speedX
y += speedY
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Horizontal Sensors
sensorPointY = y if (not onGround) sensorPointY += 4

for (sensorPointX = x-9; sensorPointX &lt;= x+9; sensorPointX += 18)
{
    tilePointDataFound = findTilePointData(tileLayer, sensorPointX, sensorPointY, tileHeight)
    if (not is_undefined(tilePointDataFound))
    {
        tilePointY = tilePointDataFound[5]
        if (sensorPointY &gt;= tilePointY)
        {
            if (onGround) speedOnGround = 0 else speeX = 0
            tileEdgeX = tilePointDataFound[1]; if (sensorPointX == x-9) tileEdgeX += tileWidth-1
            speedXsign = 1; if (speedX &lt; 0) speedXsign = -1
            x = tileEdgeX - speedXsign*(10 - 1*(sensorPointX == x+9))
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vertical Sensors
/**/moola = "yes"//
if (speedY &lt; 0 and not onGround) exit

onGround = false
bottomLevelY = y + sprite_yoffset
highestY = bottomLevelY

/*
returnValues_[0] = tileSolidity_
returnValues_[1] = tileX_
returnValues_[2] = tileY
returnValues_[3] = tileAngle_
returnValues_[4] = tilePointX_
returnValues_[5] = tilePointY_
returnValues_[6] = tilePointHeight_
*/

tilesPointsDataRowsNum = 0
for (sensorPointX = x-9; sensorPointX &lt;= x+8; sensorPointX += 17)
{
    sensorPointY = y + sensorYExt
    tileFound = false
    triesToFindTile = 0
    while true
    {
        tilePointDataFound = findTilePointData(tileLayer, sensorPointX, sensorPointY, tileHeight)
        if (not is_undefined(tilePointDataFound)) 
        {
            tileFound = true
            tilePointData = tilePointDataFound
            tileSolidity = tilePointData[0]
            tilePointHeight = tilePointData[6]
            if (tilePointHeight &lt; tileHeight) break
        }
        else
        {
            triesToFindTile++
            if (tileFound or triesToFindTile == 4) break
        }
        sensorPointY -= tileHeight
    }
    
    if (tileFound and tileSolidity)
    {
        tilesPointsDataRowsNum++; tilesPointsDataRowIndex = tilesPointsDataRowsNum - 1
        ds_grid_resize(tilesPointsData, tilesPointsDataColsNum, tilesPointsDataRowsNum)
        tilePointX = tilePointData[4];      ds_grid_set(tilesPointsData, 0, tilesPointsDataRowIndex, tilePointX)
        tilePointY = tilePointData[5];      ds_grid_set(tilesPointsData, 1, tilesPointsDataRowIndex, tilePointY)
                                            ds_grid_set(tilesPointsData, 2, tilesPointsDataRowIndex, tilePointHeight)
        tileAngle = tilePointData[3];       ds_grid_set(tilesPointsData, 3, tilesPointsDataRowIndex, tileAngle)
    }
}

if (tilesPointsDataRowsNum &gt; 0)
{
    ds_grid_sort(tilesPointsData, 1, true)
    tilePointX =        ds_grid_get(tilesPointsData, 0, 0)
    tilePointY =        ds_grid_get(tilesPointsData, 1, 0)
    tilePointHeight =   ds_grid_get(tilesPointsData, 2, 0)
    
    if (bottomLevelY &gt; tilePointY - 1)
    {
        onGround = true
        highestY = tilePointY
        angle = ds_grid_get(tilesPointsData, 3, 0)
        if (tilesPointsDataRowsNum == 2 and tilePointY == ds_grid_get(tilesPointsData, 1, 1)) angle = 0
    }
    
    ds_grid_clear(tilesPointsData, undefined)
}

y = highestY - sprite_yoffset
//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image Angle
image_angle = radtodeg(angle)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(tilesPointsData)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
